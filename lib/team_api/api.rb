# @author Mike Bland (michael.bland@gsa.gov)

require_relative 'canonicalizer'
require_relative 'config'
require 'jekyll'
require 'json'
require 'safe_yaml'

module TeamApi
  class IndexPage < ::Jekyll::Page
    private_class_method :new

    def initialize(site)
      @site = site
      @base = site.source
      @dir = File.join site.config['baseurl'], Api::BASEURL
      @name = 'index.html'
      @data = {}
    end

    def self.create(site, index_endpoints)
      index_page = new site
      index_page.process index_page.name
      layout = site.config['api_index_layout']
      fail '`api_index_layout:` not defined in _config.yml' unless layout
      index_page.read_yaml File.join(site.source, '_layouts'), layout
      index_page.data['endpoints'] = index_endpoints
      site.pages << index_page
    end
  end

  class Endpoint < ::Jekyll::Page
    private_class_method :new

    def initialize(site, endpoint_path)
      @site = site
      @base = site.source
      @dir = endpoint_path
      @name = 'api.json'
      @data = {}
    end

    def self.create(site, endpoint_path, data)
      endpoint = new site, endpoint_path
      endpoint.process endpoint.name
      endpoint.content = data.to_json
      site.pages << endpoint
    end
  end

  # Functions for generating JSON objects as part of an API
  class Api
    BASEURL = 'api'

    # Generates all of the API endpoints.
    # +site+:: Jekyll site object
    def self.generate_api(site)
      impl = ApiImpl.new site, BASEURL
      generate_collection_endpoints impl
      generate_tag_category_endpoints impl
      impl.generate_snippets_endpoints
      IndexPage.create site, impl.index_endpoints
    end

    # Calculates the full URL prefix for every API endpoint, used to generate
    # `self:` links. It is generated by concatenating the `url:` and
    # `baseurl:` values from _config.yml, and the Api::BASEURL value, e.g.
    # localhost:4001/api, https://team-api.18f.gov/public/api.
    def self.baseurl(site)
      File.join site.config['url'], site.config['baseurl'], BASEURL
    end

    def self.add_self_links(site)
      baseurl = self.baseurl site
      Config.endpoint_config.each do |endpoint_info|
        collection_name = endpoint_info['collection']
        (site.data[collection_name] || {}).values.each do |item|
          slug = Canonicalizer.canonicalize item[endpoint_info['item_id']]
          item['self'] = File.join baseurl, collection_name, slug
        end
      end
    end

    def self.generate_collection_endpoints(impl)
      Config.endpoint_config.each do |endpoint_info|
        impl.generate_index_endpoint_for_collection endpoint_info
        impl.generate_item_endpoints endpoint_info['collection']
      end
    end
    private_class_method :generate_collection_endpoints

    def self.generate_tag_category_endpoints(impl)
      %w(Skills Interests).each do |tag_category|
        impl.generate_tag_category_endpoint tag_category
        impl.generate_item_endpoints Canonicalizer.canonicalize(tag_category)
      end
    end
    private_class_method :generate_tag_category_endpoints
  end

  module ApiImplSnippetHelpers
    private

    def snippet_dates
      @snippet_dates ||= (data['snippets'] || {}).keys.sort.reverse
    end

    def snippets
      @snippets ||= snippet_dates.map { |t| [t, data['snippets'][t]] }.to_h
    end

    def snippets_by_user
      @snippets_by_user ||= snippets
        .flat_map { |date, batch| batch.map { |snippet| [date, snippet] } }
        .group_by { |_date, snippet| snippet['username'] }
        .map { |username, mapping| [username, mapping.to_h] }
        .to_h
    end

    def snippets_summary
      @snippet_summary ||= {
        'latest' => snippet_dates.first,
        'all' => snippet_dates,
        'users' => Canonicalizer.team_xrefs(
          data['team'], snippets_by_user.keys),
      }
    end

    def generate_latest_snippet_endpoint
      return if snippets.empty?
      latest = snippets.first
      endpoint = 'snippets/latest'
      Endpoint.create(site, "#{baseurl}/#{endpoint}",
        { 'datestamp' => latest[0] }.merge(envelop(endpoint, latest[1])))
    end

    def generate_snippets_by_date_endpoints
      snippets.each do |timestamp, batch|
        endpoint = "snippets/#{timestamp}"
        Endpoint.create site, "#{baseurl}/#{endpoint}", envelop(endpoint, batch)
      end
    end

    def generate_snippets_by_user_endpoints
      snippets_by_user.each do |name, batch|
        Endpoint.create site, "#{baseurl}/snippets/#{name}", batch
        Endpoint.create(
          site, "#{baseurl}/snippets/#{name}/latest", [batch.first].to_h)
      end
    end

    def generate_snippets_index_summary_endpoint
      generate_index_endpoint(
        'snippets', 'Snippets', 'Summary of all available snippets',
        snippets_summary) unless snippets.empty?
    end
  end

  class ApiImpl
    attr_accessor :site, :data, :index_endpoints, :baseurl
    include ApiImplSnippetHelpers

    def initialize(site, baseurl)
      @site = site
      @data = site.data
      @index_endpoints = []
      @baseurl = baseurl
    end

    def self_link(endpoint)
      File.join site.config['url'], baseurl, endpoint
    end

    def envelop(endpoint, items)
      return if items.nil? || items.empty?
      { 'self' => self_link(endpoint), 'results' => items }
    end

    def generate_index_endpoint(endpoint, title, description, items)
      return if items.nil? || items.empty?
      Endpoint.create site, "#{baseurl}/#{endpoint}", items
      index_endpoints << {
        'endpoint' => endpoint, 'title' => title, 'description' => description
      }
    end

    def generate_tag_category_endpoint(category)
      canonicalized = Canonicalizer.canonicalize(category)
      generate_index_endpoint(canonicalized, category,
        "Index of team members by #{category.downcase}",
        envelop(canonicalized, (data[canonicalized] || {}).values))
    end

    def generate_index_endpoint_for_collection(endpoint_info)
      collection = endpoint_info['collection']
      generate_index_endpoint(
        endpoint_info['collection'], endpoint_info['title'],
        endpoint_info['description'],
        envelop(collection, (data[collection] || {}).values))
    end

    def generate_item_endpoints(collection_name)
      (data[collection_name] || {}).each do |identifier, value|
        identifier = Canonicalizer.canonicalize(identifier)
        url = "#{baseurl}/#{collection_name}/#{identifier}"
        Endpoint.create site, url, value
      end
    end

    def generate_snippets_endpoints
      generate_latest_snippet_endpoint
      generate_snippets_by_date_endpoints
      generate_snippets_by_user_endpoints
      generate_snippets_index_summary_endpoint
    end
  end
end
